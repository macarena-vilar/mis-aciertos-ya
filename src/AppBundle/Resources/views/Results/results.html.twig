{% extends "::base.html.twig" %}

{% block title %}{% endblock %}

{% block body %}
<style type="text/css">
.largeWidth {
	width: 90%;
    margin: 0 auto;
}
</style>
<div class="container" id="main">	
{% for gameId,game in games %}
{% set vars = {"game" : game , "offset" : offset[loop.index0] , "stakes" : stakes[gameId]} %}
{% include 'AppBundle:Results:game.html.twig' with vars %}
{% endfor %}
</div>  
<script type="text/javascript">
var spinOpts = {
	lines: 13, // The number of lines to draw
	length: 11, // The length of each line
	width: 5, // The line thickness
	radius: 17, // The radius of the inner circle
	corners: 1, // Corner roundness (0..1)
	rotate: 0, // The rotation offset
	color: '#FFF', // #rgb or #rrggbb
	speed: 1, // Rounds per second
	trail: 60, // Afterglow percentage
	shadow: false, // Whether to render a shadow
	hwaccel: false, // Whether to use hardware acceleration
	className: 'spinner', // The CSS class to assign to the spinner
	zIndex: 2e9, // The z-index (defaults to 2000000000)
	top: '50%', // Top position relative to parent in px
	left: '50%' // Left position relative to parent in px
};

var spinnerOverlay = null;
var cmbs;
function afterInit() {
	adjustHeight();
	cmbs = $("select");
	//cmbs.combobox();
}

function adjustHeight() {
	divs = $(".well");
	maxH = divs.height();
	divs.height(maxH+20);
}

function startWait(){
	if ( spinnerOverlay == null ) {
		var target = document.createElement("div");
		document.body.appendChild(target);
		var spinner = new Spinner(spinOpts).spin(target);
		spinnerOverlay = iosOverlay({
			spinner: spinner
		});
	}
}

function stopWait(){
	if ( spinnerOverlay != null ){
		spinnerOverlay.hide();
		spinnerOverlay = null;
	}
}

function prizeClear(gameId) {
	nrList = $("input[data-game='" + gameId + "']");
	nrList.val('');
	$("#" + gameId + "-bet").val(1);
}

function prizeClick(gameId) {
	  gameNr   = $("#" + gameId + "-nr")[0].value.trim();
	  gameBetS = $("#" + gameId + "-bet")[0].value.trim();

	  if ( (gameNr == null || gameNr == "")) {
		  bootbox.alert( "Debe completar el n&uacute;mero del sorteo");
		  return;
	  }

	  if ( (gameBetS == null || gameBetS == "") ) {
		  bootbox.alert( "Debe ingresar el monto de la apuesta");
		  return;
	  }

	  gameBet = parseInt(gameBetS);
	  if ( gameBet == null || gameBet == "" || isNaN(gameBet) ) {
		  bootbox.alert( "El monto de la apuesta debe ser num&eacute;rico");
		  return;
	  }

	  nrList = $("input[data-game='" + gameId + "']");

	  winningNr = new Array();	  
	  for ( i=0 ; i<nrList.length ; i++ ) {
		  val = parseInt(nrList[i].value);
		  winningNr.push(val); 
		  if ( val == null || val == "" || isNaN(val) ) {
			  bootbox.alert( "Debe completar todos los n&uacute;meros");
			  return;
		  }
	  }

	  n = winningNr.length;
	  /*
	  winningNr = jQuery.unique(winningNr);

	  if ( n > winningNr.length) {
		bootbox.alert( "No puede ingresar n&uacute;meros repetidos");
	 	return;
	  }
      */
	  gameUrl = "api/v1/hitsByNr/" + gameId + "/" + gameNr;
	  startWait();
	  $.ajax({
		  url: gameUrl,
		  data: { "winningNr" : winningNr , "bet" : gameBet },
	      timeout: 30000 // 30 seconds
	  }).done(function(data) {
		  bootbox
		  	.alert({
		  		"size":"large",
		  	 	"message": data});
	  }).fail(function(a,b,c) {
		  bootbox.alert( "No hay datos disponibles para ese sorteo");
	  }).always(function() {
		  stopWait();
	  });
}
</script>
{% endblock %}
