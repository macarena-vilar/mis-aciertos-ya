<?php

namespace AppBundle\Entity;

use AppBundle\Util\GameHelperPremio;
use AppBundle\Util\GameHelperElegi2;
use \Exception;
/**
 * Fsp_GamesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Fsp_GamesRepository extends \Doctrine\ORM\EntityRepository
{
	public static function newInstance($gameId) {
		if ( $gameId == "P" )
			return new GameHelperPremio();
		else if ( $gameId == "E" )
			return new GameHelperElegi2();
		else
			throw new Exception("Juego desconocido", 1);
	}
	
	public function getGamesByDate($gameId,$gameDate,$winArr) {
		$query = $this->getEntityManager()
		              ->createQuery ( 
		              		"select g 
        	                   from AppBundle:Fsp_Games g
                              where g.gameId    = :gameId
		              		    and g.gameDate = :gameDate
		              		  order by g.drawNr desc,g.winningNr")
		              ->setParameter ( "gameId", $gameId )
		              ->setParameter ( "gameDate", $gameDate );
		try {
			$data = $query->getResult();
			$result = array();
			$drawNr = -1;
			
			foreach ( $data as $row ) {
				if ( $row->getDrawNr() != $drawNr ) {
					$drawNr = $row->getDrawNr();
					$result[$drawNr] = array(
							"drawNr"   => $drawNr,
							"gameDate" => $row->getGameDate()->format("d/m/Y"),
							"hits"     => 0,
							"winArr"   => array()
					);
				}
				$hit = 0;
				if ( in_array($row->getWinningNr(),$winArr) ){
					$hit = 1;
					$result[$drawNr]["hits"]++;
				}
				$result[$drawNr]["winArr"][] = array(
					"winningNr" => 	$row->getWinningNr(),
					"hit"       => $hit
				);			
			}
			return $result;
		} catch ( \Doctrine\ORM\NoResultException $e ) {
			return null;
		}
	}
	
	public function getPastGames($gameId,$offset,$limit) {
		$query = $this->getEntityManager()
		               ->createQuery ( "select g
        	                              from AppBundle:Fsp_Games g
                                         where g.gameId    = :gameId
		              		             order by g.drawNr desc,g.winningNr")
				       ->setParameter ( "gameId", $gameId );
		try {
			$data = $query->getResult();
			$result = array();
			$drawNr = -1;
			$i=-1;
			foreach ( $data as $row ) {
				if ( $row->getDrawNr() != $drawNr ) {
					$i++;
					$drawNr = $row->getDrawNr();
					$result[$i] = array(
							"drawNr"   => $drawNr,
							"gameDate" => $row->getGameDate()->format("d/m/Y"),
							"winArr"   => array()
					);
				}
				$result[$i]["winArr"][] = $row->getWinningNr();
			}
			return $result;
		} catch ( \Doctrine\ORM\NoResultException $e ) {
			return null;
		}
	}
}
